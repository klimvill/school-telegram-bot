from datetime import datetime, time
from typing import Union, List

from src.bot.db.enums import DaysOfWeek
from src.bot.db.methods import get_extra_lessons


def get_lesson_number(number_lessons: int) -> Union[int, str]:
	"""–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞"""
	current_time = datetime.now().time()

	if time(0, 0) <= current_time <= time(8, 0):
		lesson = '–£—Ä–æ–∫–∏ –Ω–µ –Ω–∞—á–∞–ª–∏—Å—å'
	elif time(8, 0) <= current_time <= time(8, 40):
		lesson = 0
	elif time(8, 40) <= current_time <= time(9, 35) and number_lessons >= 2:
		lesson = 1
	elif time(9, 35) <= current_time <= time(10, 30) and number_lessons >= 3:
		lesson = 2
	elif time(10, 30) <= current_time <= time(11, 25) and number_lessons >= 4:
		lesson = 3
	elif time(11, 25) <= current_time <= time(12, 20) and number_lessons >= 5:
		lesson = 4
	elif time(12, 20) <= current_time <= time(13, 10) and number_lessons >= 6:
		lesson = 5
	elif time(13, 10) <= current_time <= time(13, 55) and number_lessons >= 7:
		lesson = 6
	elif time(13, 55) <= current_time <= time(15, 00) and number_lessons >= 8:
		lesson = 7
	elif time(15, 00) <= current_time <= time(15, 45) and number_lessons >= 9:
		lesson = 8
	else:
		lesson = '–£—Ä–æ–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å'

	return lesson


def create_schedule(date: str, schedule_day: List[str]) -> str:
	"""–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
	count: int = 1

	text_message = f'üìÜ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –Ω–∞ {date}*\n'
	number_current_lesson = get_lesson_number(len(schedule_day))

	if len(schedule_day) != 0:
		if number_current_lesson in ('–£—Ä–æ–∫–∏ –Ω–µ –Ω–∞—á–∞–ª–∏—Å—å', '–£—Ä–æ–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å'):
			...
		elif schedule_day[number_current_lesson] == "":  # –í–Ω–µ—É—Ä–æ—á–∫–∏ –æ—Ç —É—Ä–æ–∫–æ–≤ –æ—Ç–¥–µ–ª—è—é—Ç—Å—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ—á–∫–æ–π –≤ —Å–ø–∏—Å–∫–µ
			number_current_lesson += 1

		if number_current_lesson == '–£—Ä–æ–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å':
			text_message += '\n*–£—Ä–æ–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å*\n'
		elif number_current_lesson == '–£—Ä–æ–∫–∏ –Ω–µ –Ω–∞—á–∞–ª–∏—Å—å':
			text_message += f'\n*–ë—É–¥–µ—Ç - {schedule_day[0]}*\n'
		else:
			text_message += f'\n*–°–µ–π—á–∞—Å - {schedule_day[number_current_lesson]}*\n'

		for value in schedule_day:
			if value == '':
				text_message += '\n\n*–í–Ω–µ—É—Ä–æ—á–∫–∏*'
			else:
				text_message += f'\n{count}. {value}'
				count += 1  # –ß–µ—Ä–µ–∑ enumerate —Å–¥–µ–ª–∞—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω—É–∂–µ–Ω –ø—Ä–æ–ø—É—Å–∫ (—Å–º. –≤—ã—à–µ)
	else:
		text_message += "\n–í—ã—Ö–æ–¥–Ω–æ–π"

	return text_message


def create_short_schedule(day_week: str, schedule_day: List[str]) -> str:
	"""–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
	count: int = 1
	text_message = f'üìÜ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –Ω–∞ {day_week}*\n'

	if len(schedule_day) != 0:
		for value in schedule_day:
			if value == '' and text_message == f'üìÜ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –Ω–∞ {day_week}*\n':
				text_message += '\n*–í–Ω–µ—É—Ä–æ—á–∫–∏*'
			elif value == '':
				text_message += '\n\n*–í–Ω–µ—É—Ä–æ—á–∫–∏*'
			else:
				text_message += f'\n{count}. {value}'
				count += 1  # –ß–µ—Ä–µ–∑ enumerate —Å–¥–µ–ª–∞—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω—É–∂–µ–Ω –ø—Ä–æ–ø—É—Å–∫ (—Å–º. –≤—ã—à–µ)
	else:
		text_message += '\n–í—ã—Ö–æ–¥–Ω–æ–π'

	return text_message


def create_extra_lesson(user_id: int) -> str:
	saved_day_week = None
	text_message = 'üìÜ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π*\n'
	extra_lessons = get_extra_lessons(user_id)

	if not extra_lessons:
		text_message += '\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n'
	else:
		extra_lessons = (
			list((DaysOfWeek.to_string(day), title, start_time, end_time))
			for day, title, start_time, end_time in extra_lessons
		)

		try:
			day_order = ('–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')
			extra_lessons = sorted(extra_lessons, key=lambda d: day_order.index(d[0].lower()))
			sorted_extra_lessons = {
				day: [extra_lesson for extra_lesson in extra_lessons if extra_lesson[0].lower() == day]
				for day in day_order
			}

			for day_week, extra_lessons in sorted_extra_lessons.items():
				if extra_lessons:
					text_message += f"\n*{extra_lessons[0][0]}*\n"

				for extra_lesson in sorted(extra_lessons, key=lambda e: e[2]):
					text_message += f"{extra_lesson[1]} ({extra_lesson[2].strftime('%H:%M')}-{extra_lesson[3].strftime('%H:%M')})\n"

		except ValueError:  # –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
			for these_classes in extra_lessons:
				day_week = these_classes[0]

				if saved_day_week != day_week:
					text_message += f"\n*{day_week}*\n"
					saved_day_week = day_week
				text_message += f"{these_classes[1]} ({these_classes[2].strftime('%H:%M')}-{these_classes[3].strftime('%H:%M')})\n"

	text_message += "\nüëá –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
	return text_message
