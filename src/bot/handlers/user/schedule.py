from datetime import datetime, timedelta

from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from src.bot.db.methods import get_schedule_day, add_extra_lesson
from src.bot.keybords import today_schedule_btn, paging_btn, add_extra_lesson_btn
from src.bot.misc import AddExtraLesson, create_schedule, create_short_schedule, create_extra_lesson
from src.resources.application_texts import add_extra_lesson_text

router_schedule = Router()


@router_schedule.message(Command('today'))
async def today(message: Message):
	"""–í—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å"""
	today_date = datetime.today()
	date = today_date.strftime('%d %b. %Y –≥.')
	user_schedule_day = get_schedule_day(message.from_user.id, str(today_date.weekday()))

	text_message = create_schedule(date, user_schedule_day)
	text_message += '\n\nüëá –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞'

	await message.answer(text_message, reply_markup=paging_btn)


@router_schedule.message(Command('tomorrow'))
async def tomorrow(message: Message):
	"""–í—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å"""
	tomorrow_date = datetime.today() + timedelta(days=1)
	date = tomorrow_date.strftime('%d %b. %Y –≥.')
	user_schedule_day = get_schedule_day(message.from_user.id, str(tomorrow_date.weekday()))

	text_message = create_short_schedule(date, user_schedule_day)
	text_message += '\n\nüëá –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'

	await message.answer(text_message, reply_markup=today_schedule_btn)


@router_schedule.message(Command('extraLesson'))
async def extra_lesson(message: Message):
	await message.answer(create_extra_lesson(message.from_user.id), reply_markup=today_schedule_btn)


@router_schedule.message(Command('addExtraLesson'))
async def add_extra_lesson_one(message: Message, state: FSMContext):
	await message.answer(add_extra_lesson_text, reply_markup=add_extra_lesson_btn)
	await state.set_state(AddExtraLesson.extra_lesson)


@router_schedule.message(AddExtraLesson.extra_lesson)
async def add_extra_lesson_two(message: Message, state: FSMContext):
	await state.update_data(extra_lesson=message.text)
	data = await state.get_data()
	await message.answer(add_extra_lesson(message.from_user.id, data['extra_lesson']))
	await state.clear()


# todo: –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å
def check_message(message: Message, s) -> bool:
	return message.text is not None and message.text.lower() in s


@router_schedule.message(lambda message: check_message(message, ('–ø–Ω', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'monday', 'mon')))
async def monday(message: Message):
	user_schedule_day = get_schedule_day(message.from_user.id, '0')
	await message.answer(create_short_schedule('–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', user_schedule_day))


@router_schedule.message(lambda message: check_message(message, ('–≤—Ç', '–≤—Ç–æ—Ä–Ω–∏–∫', 'tuesday', 'tue')))
async def tuesday(message: Message):
	user_schedule_day = get_schedule_day(message.from_user.id, '1')
	await message.answer(create_short_schedule('–≤—Ç–æ—Ä–Ω–∏–∫', user_schedule_day))


@router_schedule.message(lambda message: check_message(message, ('—Å—Ä', '—Å—Ä–µ–¥–∞', 'wednesday', 'wed')))
async def wednesday(message: Message):
	user_schedule_day = get_schedule_day(message.from_user.id, '2')
	await message.answer(create_short_schedule('—Å—Ä–µ–¥—É', user_schedule_day))


@router_schedule.message(lambda message: check_message(message, ('—á—Ç', '—á–µ—Ç–≤–µ—Ä–≥', 'thursday', 'thu')))
async def thursday(message: Message):
	user_schedule_day = get_schedule_day(message.from_user.id, '3')
	await message.answer(create_short_schedule('—á–µ—Ç–≤–µ—Ä–≥', user_schedule_day))


@router_schedule.message(lambda message: check_message(message, ('–ø—Ç', '–ø—è—Ç–Ω–∏—Ü–∞', 'friday', 'fri')))
async def friday(message: Message):
	user_schedule_day = get_schedule_day(message.from_user.id, '4')
	await message.answer(create_short_schedule('–ø—è—Ç–Ω–∏—Ü—É', user_schedule_day))


@router_schedule.message(lambda message: check_message(message, ('—Å–±', '—Å—É–±–±–æ—Ç–∞', 'saturday', 'sat')))
async def saturday(message: Message):
	user_schedule_day = get_schedule_day(message.from_user.id, '5')
	await message.answer(create_short_schedule('—Å—É–±–±–æ—Ç—É', user_schedule_day))


@router_schedule.message(lambda message: check_message(message, ('–≤—Å', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', 'sunday', 'sun')))
async def sunday(message: Message):
	user_schedule_day = get_schedule_day(message.from_user.id, '6')
	await message.answer(create_short_schedule('–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', user_schedule_day))
